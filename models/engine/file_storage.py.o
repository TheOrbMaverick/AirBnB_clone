#!/usr/bin/python3
from datetime import datetime
from os import path
import json


class FileStorage:
    __file_path = "file.json"
    __objects = {}

    def all(self):
        """Get all objects stored in the file.
        Returns:
            the dictionary __objects
        """
        return self.__objects

    def new(self, obj):
        """Add a new object to the storage
        Description:
            Sets in __objects the obj with key <obj class name>.id.
        Args:
            obj: The object to be added.
        """
        key = "{}.{}".format(obj.__class__.__name__, obj.id)
        self.__objects[key] = obj

    def save(self):
        """Serializes __objects to the JSON file (path: __file_path)."""
        serialized_objects = {}
        for key, obj in self.__objects.items():
            serialized_objects[key] = obj.to_dict()
        with open(self.__file_path, 'w', encoding='utf-8') as file:
            json.dump(serialized_objects, file, ensure_ascii=False)

    def reload(self):
        """Deserializes the JSON file to __objects."""
        if path.exists(self.__file_path):
            with open(self.__file_path, 'r', encoding='utf-8') as file:
                loaded_objects = json.load(file)
                for key, obj_dict in loaded_objects.items():
                    class_name, obj_id = key.split('.')
                    obj_dict['created_at'] = datetime.strptime(obj_dict['created_at'], "%Y-%m-%dT%H:%M:%S.%f")
                    obj_dict['updated_at'] = datetime.strptime(obj_dict['updated_at'], "%Y-%m-%dT%H:%M:%S.%f")
                    module_name = "models." + class_name
                    obj_class = eval(module_name)
                    obj_instance = obj_class(**obj_dict)
                    self.__objects[key] = obj_instance
